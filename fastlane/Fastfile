update_fastlane

# TestFlight Docs
# https://docs.fastlane.tools/actions/testflight/

# Links
# - General
# https://medium.com/practo-engineering/build-distribution-automation-with-fastlane-and-travis-ci-ios-f959dff2799f
# - Deploy Key
# https://medium.com/@tjkangs/travisci-circleci-2-0-with-fastlane-for-react-native-both-ios-and-android-3f99b71b8691

lane :beta do

	setup_travis

	begin
		delete_keychain(
	      name: ENV["MATCH_KEYCHAIN_NAME"]
	      )
	rescue => ex
	end

	begin
		create_keychain(
	      name: ENV["MATCH_KEYCHAIN_NAME"],
	      password: ENV["MATCH_KEYCHAIN_PASSWORD"],
	      default_keychain: true,
	      unlock: true,
	      timeout: 3600,
	      add_to_search_list: true
	    )

	    unlock_keychain(
	      path: ENV["MATCH_KEYCHAIN_NAME"],
	      add_to_search_list: :replace,
	      password: ENV['MATCH_KEYCHAIN_PASSWORD']
	    )

		match(
			type: "adhoc",
			keychain_name: ENV["MATCH_KEYCHAIN_NAME"],
			keychain_password: ENV["MATCH_KEYCHAIN_PASSWORD"],
			git_url: "git@github.com:aminbenarieb/muslim-quiz-ios-match.git",
			app_identifier: "com.aminbenarieb.muslim-quiz",
			force: true
			)

		increment_build_number(
			xcodeproj: "Muslim Quiz.xcodeproj"
			)

		cocoapods

		build_app(
			scheme: "Muslim Quiz",
			clean: true,
			workspace: "Muslim Quiz.xcworkspace",
			export_method: "ad-hoc",
			include_symbols: false)

		changelog = changelog_from_git_commits(
			pretty: "%b",
			merge_commit_filtering: "only_include_merges",
			date_format: "short")

		# upload_to_testflight(
		# 	changelog: changelog,
		# 	username: "amin.benarieb@gmail.com",
		# 	app_identifier: "com.aminbenarieb.muslim-quiz",
		# 	skip_waiting_for_build_processing: true
			# )

		# 3. commit_version_bump - commit incremeted version
		# 4. add_git_tag - for releases
		# 5. push_to_git_remote - 

		slack(
			pretext: "Assalamy aleikum",
		    message: "App successfully builded!",
		    slack_url: ENV["SLACK_WEB_HOOK"],
		    success: true, 
		    payload: { 
		    	"Build Date" => Time.new.to_s,
		    	"Built by" => "Travis",
		    }
		    # default_payloads: [:git_branch, :git_author]
		)

	rescue => ex
		# restore git state
		delete_keychain(
	      name: ENV["MATCH_KEYCHAIN_NAME"]
	      )
		slack(
		    message: ex.to_s, 
		    slack_url: ENV["SLACK_WEB_HOOK"],
		    success: false, 
		    payload: { 
		    	"Output" => ex.error_info.to_s
		    } 
		  )
	end

end


error do |lane, exception|
  slack(
    message: exception.to_s, 
    slack_url: ENV["SLACK_WEB_HOOK"],
    success: false, 
    payload: { 
    	"Output" => exception.error_info.to_s
    } 
  )
end
